# Easier navigation: .., ..., ~, and -
alias ..="cd .."
alias cd..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"  # ???

alias dsize="du -hs"

# mv, rm, cp
alias mv="mv -iv"
alias rm="rm -iv"
alias cp="cp -v"

alias ag="ag -f --hidden"

# ls options: A = include hidden (but not . or ..), F = put `/` after folders, h = byte unit suffixes
alias ls="ls -FhG --color"
alias la="ls -a"
alias ll="ls -l"

# Networking. IP address, dig, DNS
alias ip="host myip.opendns.com resolver1.opendns.com"

# Recursively delete `.DS_Store` files
alias cleandstore="find . -name '*.DS_Store' -type f -ls -delete"

# Empty the Trash on all mounted volumes and the main HDD. then clear the
# useless sleepimage
alias emptytrash=" \
  sudo rm -rfv /Volumes/*/.Trashes; \
  rm -rfv ~/.Trash/*; \
  sudo rm -v /private/var/vm/sleepimage; \
"

alias brewdate="brew -v update; brew upgrade --force-bottle --cleanup; brew cask -v upgrade; brew cleanup; brew cask cleanup; brew prune; brew doctor"

# For managing configuration files with git
# Inspired by:
#   1) https://developer.atlassian.com/blog/2016/02/best-way-to-store-dotfiles-git-bare-repo/
#   2) https://news.ycombinator.com/item?id=11070797
#
# To copy onto another computer:
#   1) `git clone --bare <git-repo-url> $HOME/.myconfig`
#   2) `config checkout`.
alias config='/usr/bin/git --git-dir=$HOME/.myconfig/ --work-tree=$HOME'
config config --local status.showUntrackedFiles no

alias rclone-drive-to-drive="./rclone copy --fast-list --log-file=<file>.log --drive-skip-dangling-shortcuts --drive-copy-shortcut-content --drive-server-side-across-configs -P <drive1>:<folder> <drive2>:<folder>"

porthog () {
	PORT=$1
	lsof -iTCP -sTCP:LISTEN -P | grep --color=auto "$PORT"
}

function git_branch_cleanup_dangerous {
    echo "This will delete all branches that are no longer on the remote."
    read -q "REPLY?Are you sure you want to continue? (y/n) "
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
	git fetch --prune
	git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D
    else
	echo "Aborting."
    fi
    git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D
    echo "Cleanup complete."
}
